#!/bin/bash

# Encore Platform - Kong API Gateway Initialization Script
# Script para inicializar y configurar Kong API Gateway

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para esperar a que un servicio est√© disponible
wait_for_service() {
    local host=$1
    local port=$2
    local service_name=$3
    local max_attempts=30
    local attempt=1

    log "Esperando a que $service_name est√© disponible en $host:$port..."

    while [ $attempt -le $max_attempts ]; do
        if nc -z "$host" "$port" 2>/dev/null; then
            success "$service_name est√° disponible"
            return 0
        fi

        log "Intento $attempt/$max_attempts - $service_name no est√° disponible a√∫n..."
        sleep 2
        ((attempt++))
    done

    error "$service_name no est√° disponible despu√©s de $max_attempts intentos"
    return 1
}

# Funci√≥n para verificar Kong
check_kong() {
    log "Verificando estado de Kong..."

    if ! curl -s http://localhost:8001/status > /dev/null; then
        error "Kong no est√° respondiendo"
        return 1
    fi

    success "Kong est√° funcionando correctamente"
    return 0
}

# Funci√≥n para inicializar base de datos de Kong
init_kong_database() {
    log "Inicializando base de datos de Kong..."

    # Ejecutar migraciones de Kong
    docker-compose -f docker-compose.monitoring.yml exec -T kong kong migrations bootstrap

    if [ $? -eq 0 ]; then
        success "Base de datos de Kong inicializada correctamente"
    else
        error "Error inicializando base de datos de Kong"
        return 1
    fi
}

# Funci√≥n para cargar configuraci√≥n de Kong
load_kong_config() {
    local config_file=$1
    local config_name=$2

    log "Cargando configuraci√≥n $config_name desde $config_file..."

    if [ ! -f "$config_file" ]; then
        error "Archivo de configuraci√≥n $config_file no encontrado"
        return 1
    fi

    # Cargar configuraci√≥n usando la API de Kong
    curl -X POST http://localhost:8001/config \
         -H "Content-Type: application/json" \
         -d @"$config_file"

    if [ $? -eq 0 ]; then
        success "Configuraci√≥n $config_name cargada correctamente"
    else
        error "Error cargando configuraci√≥n $config_name"
        return 1
    fi
}

# Funci√≥n para verificar configuraci√≥n cargada
verify_kong_config() {
    log "Verificando configuraci√≥n de Kong..."

    # Verificar servicios
    local services_count=$(curl -s http://localhost:8001/services | jq '.data | length')
    log "Servicios configurados: $services_count"

    # Verificar rutas
    local routes_count=$(curl -s http://localhost:8001/routes | jq '.data | length')
    log "Rutas configuradas: $routes_count"

    # Verificar plugins
    local plugins_count=$(curl -s http://localhost:8001/plugins | jq '.data | length')
    log "Plugins configurados: $plugins_count"

    if [ "$services_count" -gt 0 ] && [ "$routes_count" -gt 0 ]; then
        success "Configuraci√≥n verificada correctamente"
    else
        warning "Configuraci√≥n podr√≠a estar incompleta"
    fi
}

# Funci√≥n para probar API Gateway
test_api_gateway() {
    log "Probando API Gateway..."

    # Probar health check (sin autenticaci√≥n)
    if curl -s http://localhost:8000/api/auth/health | grep -q "ok"; then
        success "Health check de auth service funciona"
    else
        warning "Health check de auth service fall√≥"
    fi

    # Probar ruta protegida (deber√≠a fallar sin token)
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/music/songs)
    if [ "$response" -eq 401 ]; then
        success "Autenticaci√≥n JWT funciona correctamente"
    else
        warning "Autenticaci√≥n JWT podr√≠a no estar funcionando (c√≥digo: $response)"
    fi
}

# Funci√≥n para mostrar informaci√≥n de acceso
show_access_info() {
    echo
    echo "=================================================="
    echo "üéâ Kong API Gateway inicializado correctamente!"
    echo "=================================================="
    echo
    echo "üìã Informaci√≥n de acceso:"
    echo "   ‚Ä¢ API Gateway:     http://localhost:8000"
    echo "   ‚Ä¢ Admin API:       http://localhost:8001"
    echo "   ‚Ä¢ Admin GUI:       http://localhost:8002"
    echo
    echo "üîß Servicios disponibles:"
    echo "   ‚Ä¢ Auth Service:    http://localhost:8000/api/auth"
    echo "   ‚Ä¢ Music Service:   http://localhost:8000/api/music"
    echo "   ‚Ä¢ Queue Service:   http://localhost:8000/api/queue"
    echo "   ‚Ä¢ Points Service:  http://localhost:8000/api/points"
    echo "   ‚Ä¢ Analytics:       http://localhost:8000/api/analytics"
    echo "   ‚Ä¢ Menu Service:    http://localhost:8000/api/menu"
    echo
    echo "üß™ Para probar autenticaci√≥n:"
    echo "   curl http://localhost:8000/api/auth/health"
    echo
    echo "üìö Documentaci√≥n: kong/README.md"
    echo "=================================================="
}

# Funci√≥n principal
main() {
    local config_type=${1:-simple}

    echo "=================================================="
    echo "üöÄ Inicializando Kong API Gateway - Encore Platform"
    echo "=================================================="
    echo

    # Verificar dependencias
    if ! command_exists docker; then
        error "Docker no est√° instalado"
        exit 1
    fi

    if ! command_exists docker-compose; then
        error "Docker Compose no est√° instalado"
        exit 1
    fi

    if ! command_exists curl; then
        error "curl no est√° instalado"
        exit 1
    fi

    if ! command_exists jq; then
        warning "jq no est√° instalado - algunas verificaciones estar√°n limitadas"
    fi

    # Iniciar servicios de monitoreo
    log "Iniciando servicios de monitoreo..."
    docker-compose -f docker-compose.monitoring.yml up -d kong-database

    # Esperar a que la base de datos est√© disponible
    wait_for_service localhost 5432 "Kong Database"

    # Iniciar Kong
    log "Iniciando Kong API Gateway..."
    docker-compose -f docker-compose.monitoring.yml up -d kong

    # Esperar a que Kong est√© disponible
    wait_for_service localhost 8001 "Kong Admin API"
    wait_for_service localhost 8000 "Kong Proxy"

    # Verificar Kong
    check_kong

    # Inicializar base de datos
    init_kong_database

    # Reiniciar Kong para aplicar cambios
    log "Reiniciando Kong para aplicar configuraci√≥n..."
    docker-compose -f docker-compose.monitoring.yml restart kong

    # Esperar a que Kong est√© disponible nuevamente
    sleep 5
    wait_for_service localhost 8001 "Kong Admin API"

    # Determinar archivo de configuraci√≥n
    local config_file
    case $config_type in
        simple)
            config_file="kong/kong-simple.yml"
            ;;
        auth)
            config_file="kong/kong-auth.yml"
            ;;
        full)
            config_file="kong/kong.yml"
            ;;
        *)
            error "Tipo de configuraci√≥n inv√°lido: $config_type"
            echo "Opciones v√°lidas: simple, auth, full"
            exit 1
            ;;
    esac

    # Cargar configuraci√≥n
    load_kong_config "$config_file" "$config_type"

    # Verificar configuraci√≥n
    verify_kong_config

    # Probar API Gateway
    test_api_gateway

    # Mostrar informaci√≥n de acceso
    show_access_info

    success "Kong API Gateway inicializado exitosamente!"
}

# Funci√≥n de ayuda
show_help() {
    echo "Uso: $0 [tipo-configuracion]"
    echo
    echo "Tipos de configuraci√≥n disponibles:"
    echo "  simple    - Configuraci√≥n b√°sica sin autenticaci√≥n (por defecto)"
    echo "  auth      - Configuraci√≥n completa con autenticaci√≥n JWT"
    echo "  full      - Configuraci√≥n avanzada con health checks"
    echo
    echo "Ejemplos:"
    echo "  $0                    # Configuraci√≥n simple"
    echo "  $0 auth              # Configuraci√≥n con autenticaci√≥n"
    echo "  $0 full              # Configuraci√≥n completa"
    echo
    echo "Requisitos:"
    echo "  - Docker y Docker Compose instalados"
    echo "  - curl instalado"
    echo "  - jq instalado (opcional)"
}

# Manejar argumentos
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    simple|auth|full)
        main "$1"
        ;;
    *)
        main "simple"
        ;;
esac