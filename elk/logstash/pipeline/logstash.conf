# Logstash Pipeline Configuration for Encore Platform
# Procesa logs de Winston y los envía a Elasticsearch

input {
  # Input para logs TCP (de aplicaciones Node.js)
  tcp {
    port => 5000
    codec => json
    type => "encore-app"
  }

  # Input para logs de archivos (Filebeat)
  beats {
    port => 5044
    type => "encore-filebeat"
  }

  # Input para logs HTTP (para APIs REST)
  http {
    port => 8080
    type => "encore-http"
  }
}

filter {
  # Parsear timestamp si viene como string
  if [timestamp] {
    date {
      match => ["timestamp", "YYYY-MM-DD HH:mm:ss.SSS", "ISO8601"]
      target => "@timestamp"
      remove_field => ["timestamp"]
    }
  }

  # Enriquecer logs con información geo si hay IP
  if [ip] and [ip] != "127.0.0.1" and [ip] != "::1" {
    geoip {
      source => "ip"
      target => "geoip"
      database => "/usr/share/logstash/config/GeoLite2-City.mmdb"
    }
  }

  # Parsear user agent
  if [userAgent] {
    useragent {
      source => "userAgent"
      target => "user_agent"
    }
  }

  # Parsear campos específicos de Encore
  if [service] {
    mutate {
      add_field => {
        "service.name" => "%{service}"
        "service.environment" => "%{[environment]}"
      }
    }
  }

  # Categorizar logs por tipo
  if [level] {
    mutate {
      add_field => {
        "log.level" => "%{level}"
      }
    }
  }

  # Procesar errores
  if [error] {
    mutate {
      add_field => {
        "error.name" => "%{[error][name]}"
        "error.message" => "%{[error][message]}"
        "error.stack" => "%{[error][stack]}"
        "error.code" => "%{[error][code]}"
      }
    }

    # Extraer información de stack trace
    grok {
      match => { "[error][stack]" => "%{SYSLOGTIMESTAMP:stack_timestamp} %{NOTSPACE:stack_method} %{DATA:stack_file}:%{NUMBER:stack_line}" }
      add_field => {
        "error.stack_method" => "%{stack_method}"
        "error.stack_file" => "%{stack_file}"
        "error.stack_line" => "%{stack_line}"
      }
    }
  }

  # Procesar métricas de performance
  if [type] == "performance" {
    mutate {
      convert => {
        "responseTime" => "integer"
        "memory_usage" => "float"
        "cpu_usage" => "float"
      }
    }
  }

  # Procesar logs HTTP
  if [method] {
    mutate {
      add_field => {
        "http.method" => "%{method}"
        "http.url" => "%{url}"
        "http.status_code" => "%{statusCode}"
        "http.response_time" => "%{responseTime}"
        "http.user_id" => "%{userId}"
        "http.session_id" => "%{sessionId}"
        "http.request_id" => "%{requestId}"
      }
    }
  }

  # Procesar eventos de negocio
  if [type] == "business_event" {
    mutate {
      add_field => {
        "business.event" => "%{event}"
      }
    }
  }

  # Procesar logs de seguridad
  if [level] == "security" or [level] == "SECURITY" {
    mutate {
      add_field => {
        "security.event" => true
        "security.ip" => "%{ip}"
        "security.user_id" => "%{userId}"
        "security.user_agent" => "%{userAgent}"
      }
    }
  }

  # Procesar logs de auditoría
  if [type] == "audit" or [level] == "audit" or [level] == "AUDIT" {
    mutate {
      add_field => {
        "audit.event" => true
        "audit.user_id" => "%{userId}"
        "audit.action" => "%{action}"
        "audit.resource" => "%{resource}"
        "audit.timestamp" => "%{@timestamp}"
      }
    }
  }

  # Limpiar campos innecesarios
  mutate {
    remove_field => ["message", "host", "@version", "type"]
  }

  # Añadir campos comunes
  mutate {
    add_field => {
      "encore.version" => "1.0.0"
      "encore.cluster" => "production"
      "processed_at" => "%{@timestamp}"
      "processed_by" => "logstash"
    }
  }
}

output {
  # Output principal a Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "encore-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"

    # Template de índice
    template => "/usr/share/logstash/config/elasticsearch-template.json"
    template_name => "encore-logs-template"
    template_overwrite => true
  }

  # Output condicional para errores críticos
  if [level] == "critical" or [level] == "CRITICAL" or [error] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "encore-errors-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Output condicional para logs de seguridad
  if [level] == "security" or [level] == "SECURITY" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "encore-security-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Output condicional para logs de auditoría
  if [type] == "audit" or [level] == "audit" or [level] == "AUDIT" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "encore-audit-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Output condicional para métricas de performance
  if [type] == "performance" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "encore-performance-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # Debug output (solo en desarrollo)
  if [service] == "encore-platform" and [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
}