version: '3.8'

services:
  # Redis Cluster para cache distribuido avanzado
  redis-cluster:
    image: redis:7.0-alpine
    container_name: encore-redis-cluster
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./cache/redis-cluster-config.yml:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
      - redis-cluster-logs:/var/log/redis
    ports:
      - "6379:6379"
      - "16379:16379"
    networks:
      - encore-monitoring
      - encore-backend
    environment:
      - REDIS_PASSWORD=your_secure_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Sentinel para alta disponibilidad (opcional)
  redis-sentinel:
    image: redis:7.0-alpine
    container_name: encore-redis-sentinel
    depends_on:
      - redis-cluster
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./cache/redis-sentinel.conf:/etc/redis/sentinel.conf:ro
    ports:
      - "26379:26379"
    networks:
      - encore-monitoring

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: encore-kong-gateway
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PLUGINS: bundled,custom-auth
    volumes:
      - ./kong/kong-simple.yml:/etc/kong/kong.yml:ro
    ports:
      - "8000:8000"   # Proxy
      - "8443:8443"   # SSL Proxy
      - "8001:8001"   # Admin API
      - "8002:8002"   # Admin GUI
    networks:
      - encore-monitoring
      - encore-backend
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de datos para Kong
  kong-database:
    image: postgres:15
    container_name: encore-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - encore-monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch para logs y métricas
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: encore-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - xpack.monitoring.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - encore-monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - redis-cluster

  # Kibana para análisis de logs
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: encore-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=true
      - xpack.monitoring.enabled=true
    volumes:
      - ./monitoring/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./monitoring/kibana/dashboards:/usr/share/kibana/dashboards:ro
    ports:
      - "5601:5601"
    networks:
      - encore-monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana para dashboards en tiempo real
  grafana:
    image: grafana/grafana:8.5.0
    container_name: encore-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - encore-monitoring
      - encore-backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Filebeat para envío de logs a Elasticsearch
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.10.1
    container_name: encore-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - encore-monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    command: ["--strict.perms=false"]

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:v2.32.1
    container_name: encore-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - encore-monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: encore-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - encore-monitoring

  # Alertmanager para notificaciones
  alertmanager:
    image: prom/alertmanager:v0.23.0
    container_name: encore-alertmanager
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    networks:
      - encore-monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

volumes:
  redis-cluster-data:
    driver: local
  redis-cluster-logs:
    driver: local
  kong-db-data:
    driver: local
  elasticsearch-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  encore-monitoring:
    driver: bridge
  encore-backend:
    external: true
    name: encore-backend