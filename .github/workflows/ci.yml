name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # ========================================
  # LINTING & CODE QUALITY
  # ========================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run type-check

    - name: Check formatting
      run: npm run format:check

    - name: Security audit
      run: npm audit --audit-level moderate

    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================================
  # UNIT & INTEGRATION TESTS
  # ========================================
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: encore_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Install Playwright browsers
      run: |
        cd tests
        npx playwright install --with-deps

    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d encore_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

    - name: Run unit tests
      run: npm run test:unit:ci
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/encore_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret_for_ci_testing_only_not_for_production_use

    - name: Run integration tests
      run: npm run test:integration:ci
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/encore_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_jwt_secret_for_ci_testing_only_not_for_production_use

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./tests/coverage/lcov.info
        flags: unit,integration
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          tests/reports/
          tests/coverage/
        retention-days: 30

  # ========================================
  # E2E TESTS
  # ========================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Install Playwright browsers
      run: |
        cd tests
        npx playwright install --with-deps

    - name: Build frontend
      run: npm run build:frontend

    - name: Run E2E tests
      run: npm run test:e2e:ci
      env:
        NODE_ENV: test
        BASE_URL: http://localhost:3000

    - name: Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ github.run_id }}
        path: tests/test-results/
        retention-days: 30

  # ========================================
  # PERFORMANCE TESTS
  # ========================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Install Playwright browsers
      run: |
        cd tests
        npx playwright install --with-deps

    - name: Build frontend
      run: npm run build:frontend

    - name: Run performance tests
      run: npm run test:performance:ci

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results-${{ github.run_id }}
        path: tests/test-results/
        retention-days: 30

  # ========================================
  # ACCESSIBILITY TESTS
  # ========================================
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Install Playwright browsers
      run: |
        cd tests
        npx playwright install --with-deps

    - name: Build frontend
      run: npm run build:frontend

    - name: Run accessibility tests
      run: npm run test:accessibility:ci

    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results-${{ github.run_id }}
        path: tests/test-results/
        retention-days: 30

  # ========================================
  # SECURITY SCANNING
  # ========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=package.json

  # ========================================
  # BUILD & DOCKER
  # ========================================
  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, test, e2e]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: encore/frontend:${{ github.sha }}, encore/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push auth-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/auth-service
        push: true
        tags: encore/auth-service:${{ github.sha }}, encore/auth-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push music-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/music-service
        push: true
        tags: encore/music-service:${{ github.sha }}, encore/music-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push points-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/points-service
        push: true
        tags: encore/points-service:${{ github.sha }}, encore/points-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push menu-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/menu-service
        push: true
        tags: encore/menu-service:${{ github.sha }}, encore/menu-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push analytics-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/analytics-service
        push: true
        tags: encore/analytics-service:${{ github.sha }}, encore/analytics-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push queue-service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/queue-service
        push: true
        tags: encore/queue-service:${{ github.sha }}, encore/queue-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # DEPLOYMENT STATUS
  # ========================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, performance, accessibility, security, build]
    if: success()

    steps:
    - name: CI Pipeline Completed Successfully
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Code Quality: PASSED"
        echo "✅ Unit Tests: PASSED"
        echo "✅ Integration Tests: PASSED"
        echo "✅ E2E Tests: PASSED"
        echo "✅ Performance Tests: PASSED"
        echo "✅ Accessibility Tests: PASSED"
        echo "✅ Security Scan: PASSED"
        echo "✅ Docker Build: PASSED"
        echo ""
        echo "🚀 Ready for deployment!"

  ci-failure:
    name: CI Failure
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, performance, accessibility, security, build]
    if: failure()

    steps:
    - name: CI Pipeline Failed
      run: |
        echo "❌ CI Pipeline failed!"
        echo "Please check the failed jobs above for details."
        echo ""
        echo "🔧 Common solutions:"
        echo "• Fix linting errors: npm run lint:fix"
        echo "• Fix test failures: npm run test"
        echo "• Check security issues: npm audit"
        echo "• Review build logs for Docker issues"

    - name: Notify on failure
      if: github.ref == 'refs/heads/main'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "CI Pipeline failed on main branch"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}