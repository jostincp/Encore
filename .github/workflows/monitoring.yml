name: Monitoring & Alerts

on:
  schedule:
    # Ejecutar diariamente a las 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      check_type:
        description: 'Type of check to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - health
          - performance
          - security
          - dependencies

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # HEALTH CHECKS
  # ========================================
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'all' || inputs.check_type == 'health'

    strategy:
      matrix:
        environment: [staging, production]
        include:
          - environment: staging
            base_url: https://api-staging.encore-platform.com
            frontend_url: https://encore-platform-staging.pages.dev
          - environment: production
            base_url: https://api.encore-platform.com
            frontend_url: https://encore-platform.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Health check - API Gateway
      run: |
        echo "Checking API Gateway health..."
        response=$(curl -s -w "%{http_code}" -o /dev/null ${{ matrix.base_url }}/health)

        if [ "$response" -ne 200 ]; then
          echo "❌ API Gateway health check failed: HTTP $response"
          echo "API_HEALTH_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ API Gateway health check passed"
          echo "API_HEALTH_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Health check - Auth Service
      run: |
        echo "Checking Auth Service health..."
        response=$(curl -s -w "%{http_code}" -o /dev/null ${{ matrix.base_url }}/api/auth/health)

        if [ "$response" -ne 200 ]; then
          echo "❌ Auth Service health check failed: HTTP $response"
          echo "AUTH_HEALTH_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ Auth Service health check passed"
          echo "AUTH_HEALTH_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Health check - Music Service
      run: |
        echo "Checking Music Service health..."
        response=$(curl -s -w "%{http_code}" -o /dev/null ${{ matrix.base_url }}/api/music/health)

        if [ "$response" -ne 200 ]; then
          echo "❌ Music Service health check failed: HTTP $response"
          echo "MUSIC_HEALTH_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ Music Service health check passed"
          echo "MUSIC_HEALTH_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Health check - Frontend
      run: |
        echo "Checking Frontend health..."
        response=$(curl -s -w "%{http_code}" -o /dev/null ${{ matrix.frontend_url }})

        if [ "$response" -ne 200 ]; then
          echo "❌ Frontend health check failed: HTTP $response"
          echo "FRONTEND_HEALTH_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ Frontend health check passed"
          echo "FRONTEND_HEALTH_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Check database connectivity
      run: |
        # This would require database credentials
        # For now, just check if the service can connect
        echo "Database connectivity check would go here"

    - name: Send health report
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.API_HEALTH_STATUS == 'fail' || env.AUTH_HEALTH_STATUS == 'fail' || env.MUSIC_HEALTH_STATUS == 'fail' || env.FRONTEND_HEALTH_STATUS == 'fail' && 'failure' || 'success' }}
        text: "Health Check Report - ${{ matrix.environment }}"
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # PERFORMANCE MONITORING
  # ========================================
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'all' || inputs.check_type == 'performance'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse
      run: npm install -g lighthouse @lhci/cli

    - name: Run Lighthouse on Production
      run: |
        echo "Running Lighthouse performance audit..."
        lighthouse https://encore-platform.com \
          --output json \
          --output html \
          --output-path ./lighthouse-results.json \
          --chrome-flags="--headless --disable-gpu --no-sandbox"

    - name: Analyze Lighthouse results
      run: |
        # Extract key metrics
        PERFORMANCE_SCORE=$(jq '.categories.performance.score * 100' lighthouse-results.json)
        FCP=$(jq '.audits["first-contentful-paint"].displayValue' lighthouse-results.json)
        LCP=$(jq '.audits["largest-contentful-paint"].displayValue' lighthouse-results.json)
        TBT=$(jq '.audits["total-blocking-time"].displayValue' lighthouse-results.json)
        CLS=$(jq '.audits["cumulative-layout-shift"].displayValue' lighthouse-results.json)

        echo "Performance Score: $PERFORMANCE_SCORE"
        echo "First Contentful Paint: $FCP"
        echo "Largest Contentful Paint: $LCP"
        echo "Total Blocking Time: $TBT"
        echo "Cumulative Layout Shift: $CLS"

        # Check against thresholds
        if (( $(echo "$PERFORMANCE_SCORE < 90" | bc -l) )); then
          echo "❌ Performance score below threshold: $PERFORMANCE_SCORE < 90"
          echo "PERFORMANCE_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ Performance score within acceptable range: $PERFORMANCE_SCORE"
          echo "PERFORMANCE_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results-${{ github.run_id }}
        path: |
          lighthouse-results.json
          lighthouse-results.html
        retention-days: 30

    - name: API Performance test
      run: |
        echo "Testing API response times..."

        # Test auth endpoint
        AUTH_TIME=$(curl -s -w "%{time_total}" -o /dev/null https://api.encore-platform.com/api/auth/health)
        echo "Auth endpoint response time: ${AUTH_TIME}s"

        # Test music endpoint
        MUSIC_TIME=$(curl -s -w "%{time_total}" -o /dev/null https://api.encore-platform.com/api/music/health)
        echo "Music endpoint response time: ${MUSIC_TIME}s"

        # Check if response times are acceptable (< 1 second)
        if (( $(echo "$AUTH_TIME > 1.0" | bc -l) )) || (( $(echo "$MUSIC_TIME > 1.0" | bc -l) )); then
          echo "❌ API response times too slow"
          echo "API_PERFORMANCE_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ API response times acceptable"
          echo "API_PERFORMANCE_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Send performance alert
      if: env.PERFORMANCE_STATUS == 'fail' || env.API_PERFORMANCE_STATUS == 'fail'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "⚠️ Performance degradation detected"
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # SECURITY MONITORING
  # ========================================
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'all' || inputs.check_type == 'security'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level moderate --json > security-audit.json || true

        # Check for vulnerabilities
        VULNERABILITIES=$(jq '.metadata.vulnerabilities.total' security-audit.json 2>/dev/null || echo "0")

        if [ "$VULNERABILITIES" -gt 0 ]; then
          echo "❌ Security vulnerabilities found: $VULNERABILITIES"
          echo "SECURITY_STATUS=fail" >> $GITHUB_ENV
          echo "VULNERABILITY_COUNT=$VULNERABILITIES" >> $GITHUB_ENV
        else
          echo "✅ No security vulnerabilities found"
          echo "SECURITY_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Check for exposed secrets
      run: |
        echo "Checking for exposed secrets..."

        # Use gitleaks or similar tool
        if command -v gitleaks >/dev/null 2>&1; then
          gitleaks detect --verbose --redact --config .gitleaks.toml . > gitleaks-results.json || true

          if [ -s gitleaks-results.json ]; then
            echo "❌ Potential secrets exposed"
            echo "SECRETS_STATUS=fail" >> $GITHUB_ENV
          else
            echo "✅ No exposed secrets found"
            echo "SECRETS_STATUS=pass" >> $GITHUB_ENV
          fi
        else
          echo "⚠️ Gitleaks not available, skipping secrets check"
        fi

    - name: Check SSL/TLS certificate
      run: |
        echo "Checking SSL certificate..."

        # Check certificate expiry
        CERT_INFO=$(echo | openssl s_client -servername encore-platform.com -connect encore-platform.com:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null)

        if [ -z "$CERT_INFO" ]; then
          echo "❌ Could not retrieve SSL certificate"
          echo "SSL_STATUS=fail" >> $GITHUB_ENV
        else
          # Extract expiry date
          EXPIRY_DATE=$(echo "$CERT_INFO" | grep "notAfter" | cut -d'=' -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
          CURRENT_TIMESTAMP=$(date +%s)
          DAYS_LEFT=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))

          if [ $DAYS_LEFT -lt 30 ]; then
            echo "❌ SSL certificate expires soon: $DAYS_LEFT days left"
            echo "SSL_STATUS=fail" >> $GITHUB_ENV
          else
            echo "✅ SSL certificate valid: $DAYS_LEFT days left"
            echo "SSL_STATUS=pass" >> $GITHUB_ENV
          fi
        fi

    - name: Send security alert
      if: env.SECURITY_STATUS == 'fail' || env.SECRETS_STATUS == 'fail' || env.SSL_STATUS == 'fail'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "🚨 Security issue detected"
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # DEPENDENCY MONITORING
  # ========================================
  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.check_type == 'all' || inputs.check_type == 'dependencies'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        npm outdated --json > outdated.json || true

        # Count outdated packages
        OUTDATED_COUNT=$(jq 'length' outdated.json 2>/dev/null || echo "0")

        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "⚠️ $OUTDATED_COUNT outdated dependencies found"
          echo "OUTDATED_STATUS=warning" >> $GITHUB_ENV
          echo "OUTDATED_COUNT=$OUTDATED_COUNT" >> $GITHUB_ENV
        else
          echo "✅ All dependencies are up to date"
          echo "OUTDATED_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Check for deprecated packages
      run: |
        echo "Checking for deprecated packages..."

        # This would require additional tooling
        # For now, just check package.json for known deprecated packages
        echo "Dependency deprecation check would go here"

    - name: License compliance check
      run: |
        echo "Checking license compliance..."

        # Generate license report
        npx license-checker --json > licenses.json

        # Check for unacceptable licenses
        UNACCEPTABLE_LICENSES=$(jq '[.[] | select(.licenses | contains("GPL") or contains("AGPL"))] | length' licenses.json)

        if [ "$UNACCEPTABLE_LICENSES" -gt 0 ]; then
          echo "❌ Unacceptable licenses found: $UNACCEPTABLE_LICENSES"
          echo "LICENSE_STATUS=fail" >> $GITHUB_ENV
        else
          echo "✅ License compliance check passed"
          echo "LICENSE_STATUS=pass" >> $GITHUB_ENV
        fi

    - name: Send dependency alert
      if: env.OUTDATED_STATUS == 'warning' || env.LICENSE_STATUS == 'fail'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.LICENSE_STATUS == 'fail' && 'failure' || 'warning' }}
        text: "${{ env.LICENSE_STATUS == 'fail' && '🚨 License compliance issue' || '⚠️ Outdated dependencies detected' }}"
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # COMPREHENSIVE REPORT
  # ========================================
  generate-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-checks, performance-monitoring, security-monitoring, dependency-monitoring]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate comprehensive report
      run: |
        echo "# 🔍 Encore Platform - Monitoring Report" > monitoring-report.md
        echo "" >> monitoring-report.md
        echo "**Generated:** $(date)" >> monitoring-report.md
        echo "**Environment:** Production" >> monitoring-report.md
        echo "**Commit:** ${{ github.sha }}" >> monitoring-report.md
        echo "" >> monitoring-report.md

        echo "## 📊 Health Status" >> monitoring-report.md
        echo "" >> monitoring-report.md
        echo "| Service | Status |" >> monitoring-report.md
        echo "|---------|--------|" >> monitoring-report.md
        echo "| API Gateway | ${{ env.API_HEALTH_STATUS == 'pass' && '✅' || '❌' }} |" >> monitoring-report.md
        echo "| Auth Service | ${{ env.AUTH_HEALTH_STATUS == 'pass' && '✅' || '❌' }} |" >> monitoring-report.md
        echo "| Music Service | ${{ env.MUSIC_HEALTH_STATUS == 'pass' && '✅' || '❌' }} |" >> monitoring-report.md
        echo "| Frontend | ${{ env.FRONTEND_HEALTH_STATUS == 'pass' && '✅' || '❌' }} |" >> monitoring-report.md
        echo "" >> monitoring-report.md

        echo "## ⚡ Performance Metrics" >> monitoring-report.md
        echo "" >> monitoring-report.md
        if [ -f lighthouse-results.json ]; then
          PERFORMANCE_SCORE=$(jq '.categories.performance.score * 100' lighthouse-results.json 2>/dev/null || echo "N/A")
          echo "**Lighthouse Performance Score:** $PERFORMANCE_SCORE" >> monitoring-report.md
        fi
        echo "" >> monitoring-report.md

        echo "## 🔒 Security Status" >> monitoring-report.md
        echo "" >> monitoring-report.md
        echo "**Vulnerabilities:** ${{ env.VULNERABILITY_COUNT || '0' }}" >> monitoring-report.md
        echo "**SSL Status:** ${{ env.SSL_STATUS == 'pass' && '✅ Valid' || '❌ Expiring soon' }}" >> monitoring-report.md
        echo "" >> monitoring-report.md

        echo "## 📦 Dependencies" >> monitoring-report.md
        echo "" >> monitoring-report.md
        echo "**Outdated packages:** ${{ env.OUTDATED_COUNT || '0' }}" >> monitoring-report.md
        echo "**License compliance:** ${{ env.LICENSE_STATUS == 'pass' && '✅' || '❌' }}" >> monitoring-report.md
        echo "" >> monitoring-report.md

        echo "## 📈 Overall Status" >> monitoring-report.md
        echo "" >> monitoring-report.md

        # Calculate overall status
        if [[ "${API_HEALTH_STATUS:-pass}" == "pass" && \
              "${AUTH_HEALTH_STATUS:-pass}" == "pass" && \
              "${MUSIC_HEALTH_STATUS:-pass}" == "pass" && \
              "${FRONTEND_HEALTH_STATUS:-pass}" == "pass" && \
              "${PERFORMANCE_STATUS:-pass}" == "pass" && \
              "${SECURITY_STATUS:-pass}" == "pass" && \
              "${LICENSE_STATUS:-pass}" == "pass" ]]; then
          echo "🎉 **All systems operational**" >> monitoring-report.md
          OVERALL_STATUS="success"
        else
          echo "⚠️ **Issues detected - review details above**" >> monitoring-report.md
          OVERALL_STATUS="failure"
        fi

        echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV

    - name: Upload monitoring report
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-report-${{ github.run_id }}
        path: monitoring-report.md
        retention-days: 30

    - name: Send monitoring report
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.OVERALL_STATUS }}
        text: "Monitoring Report - ${{ env.OVERALL_STATUS == 'success' && '✅ All systems operational' || '⚠️ Issues detected' }}"
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}