AWSTemplateFormatVersion: '2010-09-09'
Description: 'Encore Platform - Secrets Manager Infrastructure with Automatic Rotation'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - staging
      - development

  RotationSchedule:
    Type: String
    Default: 'rate(30 days)'
    Description: 'Schedule for automatic secret rotation'

Resources:
  # Funci贸n Lambda para rotaci贸n de secretos
  SecretRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'encore-secret-rotation-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const { SecretsManagerClient, GetSecretValueCommand, UpdateSecretValueCommand, PutSecretValueCommand } = require('@aws-sdk/client-secrets-manager');
          const crypto = require('crypto');

          const client = new SecretsManagerClient({ region: process.env.AWS_REGION || 'us-east-1' });

          exports.handler = async (event) => {
            console.log('Rotation event:', JSON.stringify(event, null, 2));

            const { SecretId, ClientRequestToken, Step } = event;

            try {
              switch (Step) {
                case 'createSecret':
                  return await createSecret(SecretId, ClientRequestToken);
                case 'setSecret':
                  return await setSecret(SecretId, ClientRequestToken);
                case 'testSecret':
                  return await testSecret(SecretId, ClientRequestToken);
                case 'finishSecret':
                  return await finishSecret(SecretId, ClientRequestToken);
                default:
                  throw new Error(`Unknown step: ${Step}`);
              }
            } catch (error) {
              console.error('Rotation error:', error);
              throw error;
            }
          };

          async function createSecret(secretId, clientRequestToken) {
            const currentSecret = await getCurrentSecret(secretId);
            const newSecret = generateNewSecret(secretId, currentSecret);

            await client.send(new PutSecretValueCommand({
              SecretId: secretId,
              ClientRequestToken: clientRequestToken,
              SecretString: JSON.stringify(newSecret),
              VersionStages: ['AWSPENDING']
            }));

            return { statusCode: 200, body: 'createSecret completed' };
          }

          async function setSecret(secretId, clientRequestToken) {
            return { statusCode: 200, body: 'setSecret completed' };
          }

          async function testSecret(secretId, clientRequestToken) {
            const newSecret = await getSecretValue(secretId, 'AWSPENDING');
            if (!isValidSecret(secretId, newSecret)) {
              throw new Error('Invalid secret format');
            }
            return { statusCode: 200, body: 'testSecret completed' };
          }

          async function finishSecret(secretId, clientRequestToken) {
            await client.send(new UpdateSecretCommand({
              SecretId: secretId,
              VersionStage: 'AWSCURRENT',
              MoveToVersionId: clientRequestToken
            }));
            return { statusCode: 200, body: 'finishSecret completed' };
          }

          async function getCurrentSecret(secretId) {
            const command = new GetSecretValueCommand({
              SecretId: secretId,
              VersionStage: 'AWSCURRENT'
            });
            const response = await client.send(command);
            return JSON.parse(response.SecretString);
          }

          async function getSecretValue(secretId, versionStage) {
            const command = new GetSecretValueCommand({
              SecretId: secretId,
              VersionStage: versionStage
            });
            const response = await client.send(command);
            return JSON.parse(response.SecretString);
          }

          function generateNewSecret(secretId, currentSecret) {
            if (secretId.includes('jwt')) {
              return {
                ...currentSecret,
                secret: crypto.randomBytes(64).toString('hex'),
                rotatedAt: new Date().toISOString()
              };
            }
            if (secretId.includes('database')) {
              const newPassword = crypto.randomBytes(32).toString('base64').replace(/[^a-zA-Z0-9]/g, '');
              return {
                ...currentSecret,
                password: newPassword,
                rotatedAt: new Date().toISOString()
              };
            }
            return {
              ...currentSecret,
              rotatedAt: new Date().toISOString()
            };
          }

          function isValidSecret(secretId, secret) {
            if (secretId.includes('jwt')) {
              return secret.secret && secret.secret.length >= 32;
            }
            if (secretId.includes('database')) {
              return secret.url && secret.password && secret.password.length >= 8;
            }
            return secret && typeof secret === 'object';
          }
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region

  # Permisos para la funci贸n Lambda
  SecretRotationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'encore-secret-rotation-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                  - secretsmanager:PutSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:encore/*'

  # Secreto para JWT
  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/jwt-${Environment}'
      Description: 'JWT secrets for Encore authentication'
      SecretString: !Sub |
        {
          "secret": "${JWT_SECRET}",
          "refreshExpiresIn": "7d",
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: JWT

  # Secreto para base de datos
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/database-${Environment}'
      Description: 'Database connection secrets for Encore'
      SecretString: !Sub |
        {
          "url": "${DATABASE_URL}",
          "password": "${DB_PASSWORD}",
          "ssl": true,
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: Database

  # Secreto para Redis
  RedisSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/redis-${Environment}'
      Description: 'Redis connection secrets for Encore'
      SecretString: !Sub |
        {
          "url": "${REDIS_URL}",
          "password": "${REDIS_PASSWORD}",
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: Redis

  # Secreto para YouTube API
  YouTubeAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/youtube-api-${Environment}'
      Description: 'YouTube API credentials for Encore'
      SecretString: !Sub |
        {
          "apiKey": "${YOUTUBE_API_KEY}",
          "quotaLimit": 10000,
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: API
        - Key: Service
          Value: YouTube

  # Secreto para Spotify API
  SpotifyAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/spotify-api-${Environment}'
      Description: 'Spotify API credentials for Encore'
      SecretString: !Sub |
        {
          "clientId": "${SPOTIFY_CLIENT_ID}",
          "clientSecret": "${SPOTIFY_CLIENT_SECRET}",
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: API
        - Key: Service
          Value: Spotify

  # Secreto para Stripe
  StripeSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'encore/stripe-api-${Environment}'
      Description: 'Stripe API credentials for Encore'
      SecretString: !Sub |
        {
          "publishableKey": "${STRIPE_PUBLISHABLE_KEY}",
          "secretKey": "${STRIPE_SECRET_KEY}",
          "webhookSecret": "${STRIPE_WEBHOOK_SECRET}",
          "createdAt": "${AWS::Timestamp}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Application
          Value: Encore
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: API
        - Key: Service
          Value: Stripe

  # Configuraci贸n de rotaci贸n autom谩tica para JWT
  JWTSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref JWTSecret
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # Configuraci贸n de rotaci贸n autom谩tica para base de datos
  DatabaseSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref DatabaseSecret
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

  # Configuraci贸n de rotaci贸n autom谩tica para Redis
  RedisSecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref RedisSecret
      RotationLambdaARN: !GetAtt SecretRotationFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

Outputs:
  JWTSecretArn:
    Description: 'ARN of the JWT secret'
    Value: !Ref JWTSecret
    Export:
      Name: !Sub '${Environment}-JWTSecretArn'

  DatabaseSecretArn:
    Description: 'ARN of the database secret'
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub '${Environment}-DatabaseSecretArn'

  RedisSecretArn:
    Description: 'ARN of the Redis secret'
    Value: !Ref RedisSecret
    Export:
      Name: !Sub '${Environment}-RedisSecretArn'

  RotationFunctionArn:
    Description: 'ARN of the secret rotation Lambda function'
    Value: !GetAtt SecretRotationFunction.Arn
    Export:
      Name: !Sub '${Environment}-RotationFunctionArn'